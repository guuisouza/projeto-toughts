name: Deploy Application with SonarQube Analysis

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/toughts-app:latest

  sonarqube-analysis:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SSH into server and run SonarQube
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Iniciar container SonarQube temporário
            docker run --name sonarqube-toughts --network guuiisouza-toughts -d -p 8126:9000 sonarqube:lts

            # Esperar o SonarQube inicializar (com verificação)
            echo "Aguardando inicialização do SonarQube..."
            for i in {1..30}; do
              if docker logs sonarqube-toughts 2>&1 | grep -q "SonarQube is operational"; then
                break
              fi
              sleep 10
            done

            # Gerar token temporário via API SonarQube (sem jq, usando grep)
            echo "Gerando token temporário do SonarQube..."
            TOKEN=$(curl -s -u admin:admin -X POST "http://localhost:8126/api/user_tokens/generate" -d "name=github-action-token" | grep -oP '"token":"\K[^"]+')

            if [ -z "$TOKEN" ]; then
              echo "Falha ao gerar token do SonarQube"
              docker stop sonarqube-toughts
              docker rm sonarqube-toughts
              exit 1
            fi
            echo "Token gerado com sucesso."

            # Executar análise com o token gerado
            docker run --rm \
              --network guuiisouza-toughts \
              -v "$(pwd):/usr/src" \
              -u "0:0" \
              -e SONAR_USER_HOME=/tmp/.sonar-scanner \
              sonarsource/sonar-scanner-cli \
              -Dsonar.projectKey=toughts-app \
              -Dsonar.projectName="Toughts App" \
              -Dsonar.projectVersion=1.0 \
              -Dsonar.sources=. \
              -Dsonar.sourceEncoding=UTF-8 \
              -Dsonar.host.url=http://sonarqube-toughts:9000 \
              -Dsonar.login="$TOKEN" \
              -Dsonar.qualitygate.wait=true

            # Parar e remover container SonarQube
            docker stop sonarqube-toughts
            docker rm sonarqube-toughts

  deploy:
    needs: sonarqube-analysis
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Criar rede Docker personalizada
            docker network create guuiisouza-toughts || true

            # Criar volumes persistentes para MySQL e Redis
            docker volume create guuiisouza-toughts-mysql-data || true
            docker volume create guuiisouza-toughts-redis-data || true

            # Criar e iniciar o container MySQL (se não existir)
            docker ps -a --filter "name=guuiisouza-toughts-mysql" --format '{{.Names}}' | grep -q guuiisouza-toughts-mysql || docker run --name guuiisouza-toughts-mysql --network guuiisouza-toughts -p 8124:3306 -e MYSQL_ROOT_PASSWORD=g12171928 -e MYSQL_DATABASE=toughts2 -v guuiisouza-toughts-mysql-data:/var/lib/mysql -d mysql:8.0

            # Criar e iniciar o container Redis (se não existir)
            docker ps -a --filter "name=guuiisouza-toughts-redis" --format '{{.Names}}' | grep -q guuiisouza-toughts-redis || docker run --name guuiisouza-toughts-redis --network guuiisouza-toughts -p 8125:6379 -v guuiisouza-toughts-redis-data:/data -d redis:7-alpine

            # Parar e remover o container da aplicação antiga (se existir)
            docker stop guuiisouza-toughts-app || true
            docker rm guuiisouza-toughts-app || true

            # Puxar a última imagem do Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/toughts-app:latest

            # Criar e iniciar o novo container da aplicação
            docker run --name guuiisouza-toughts-app --network guuiisouza-toughts -p 8123:8123 -e REDIS_URL=${{ secrets.REDIS_URL }} -e SESSION_SECRET='${{ secrets.SESSION_SECRET }}' -e MYSQL_DB=${{ secrets.MYSQL_DB }} -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} -e MYSQL_USER=${{ secrets.MYSQL_USER }} -d ${{ secrets.DOCKER_USERNAME }}/toughts-app:latest
